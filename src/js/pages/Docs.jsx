import React, {PropTypes, Component, PureComponent} from "react";
import {CONFIG_SHAPE} from "../util/shapes";
import join from "url-join";

export default class Docs extends PureComponent {
  static contextTypes = {
    config: CONFIG_SHAPE
  };

  render() {
    const {config} = this.context;

    return (
      <div className="container">
        <h1>Docs</h1>
        <h2>Introduction</h2>
        <p className="flow-text">
          This specification describes the functionality and the expected behavior of this OAuth2 server.
        </p>
        <h2>API</h2>
        <p className="flow-text">
          Live documentation for the API can be found <a target="_blank" rel="noopener"
                                                         href="https://docs.oauth2cloud.com/#/oauth2">here</a>.
          The most relevant endpoints are associated with the <em>oauth2</em> tag.
        </p>
        <p>
          This API documentation will always be up-to-date and accurate, since they are generated by the server. Feel
          free to watch the <a href={join(config.API_URL, 'swagger.json')}>source JSON file</a> for changes!
        </p>
        <hr />

        <h2>Functionality</h2>

        <h3>Authentication</h3>
        <p className="flow-text">
          This OAuth2 server does not allow log in via e-mail and password combinations. Rather the only methods
          available for user authentication are via e-mail or Google.
        </p>
        <p>
          This makes it easier to transition existing identity systems to OAuth2Cloud. No passwords have to be
          transferred. When validating tokens, match users who log in via OAuth2Cloud based on their e-mail addresses to
          users in your own system.
        </p>
        <h4>Via E-mail</h4>
        <p>
          The user enters an e-mail address and receives an e-mail with a link to log in. The duration for which this
          link will work is configurable. Once clicked, the user is directed to a page where they may authorize any
          client requested scopes.
        </p>
        <h4>Via Google</h4>
        <p>
          The user clicks a link where they are directed to sign in via Google. Once logged in to Google, they will be
          redirected back to OAuth2Cloud to authorize any client-requested scopes.
        </p>

        <h3>Authorization</h3>
        <p>
          This OAuth2 server supports defining scopes and assigning scopes to different clients with three different
          priorities.
        </p>
        <ul>
          <li>
            <strong>Required</strong>: The user may not log in to a particular client without accepting this scope
          </li>
          <li>
            <strong>Required Hidden</strong>: The user will not be prompted to authorize this scope, but any tokens
            created will have the scope.
          </li>
          <li>
            <strong>Ask</strong>: The user will be asked for this scope and may decline
          </li>
        </ul>

        <h3>Linking Users</h3>
        <p>
          Because we cannot merge your user-associated data, we allow you to link users via this administrative website.
        </p>
        <p>
          When retrieving token information for a linked user, you will see the e-mail address used to log in, in
          addition to information for all users linked to that user. There is however no concept of a <em>primary</em>
          user. You will always see the e-mail used to log in first.
        </p>

        <hr />
        <h2>Customizing OAuth2Cloud</h2>
        <h3>Style</h3>
        <p className="flow-text">
          OAuth2Cloud supports injecting your own stylesheets, favicons, and logo URLs into your authentication and
          authorization pages
        </p>

        <h3>Using your own domain</h3>
        <p className="flow-text">
          You can send users to a log in page on your own domain, e.g. login.my-site.com
        </p>
        <ol>
          <li>Configure a CDN (e.g. AWS CloudFront or Cloudflare) to use api.oauth2cloud.com as an origin server.</li>
          <li>Configure your CDN to serve your own SSL certificates</li>
          <li>Point your DNS at the CDN-provided domain</li>
        </ol>
      </div>
    );
  }
}